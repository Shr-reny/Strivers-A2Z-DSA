A set in STL is a container that stores unique elements in a particular order.
Every operation on a set takes O(1) complexity in the average case and takes O(n) in the worst case.

Example:
set<int> s;
set<string> str;

Functions:

1. insert() – to insert an element in the set.
  set<int> s;
  s.insert(1);
  s.insert(2);
2. begin() – return an iterator pointing to the first element in the set.
3. end() – returns an iterator to the theoretical element after the last element.
4. count() – returns true or false based on whether the element is present in the set or not.
   set<int> s;
   s.insert(1);
   s.insert(2);
   s.count(2); //returns true
5. clear() – deletes all the elements in the set.
6. find() – to search an element in the set.
   set<int> s;
   s.insert(1);
   s.insert(2);
   if(s.find(2)!=s.end())
   cout<<"true"<<endl;
7. erase() – to delete a single element or elements between a particular range.
8. size() – returns the size of the set.
9. empty() – to check if the set is empty or not.
10. cbegin() – it refers to the first element of the set.
11. cend() – it refers to the theoretical element after the last element of the set.
12. rbegin() – it points to the last element of the set.
13.rend() – it points to the theoretical element before the first element of the set.
14. bucket_size() – gives the total number of elements present in a specific bucket in a set.
15. emplace() – to insert an element in the set.
16. max_size() – the maximum elements a set can hold.
17. max_bucket_count() – to check the maximum number of buckets a set can hold.
