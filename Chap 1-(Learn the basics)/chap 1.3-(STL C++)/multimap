multimap in STL are associative containers like maps where each element consists of a key value and a mapped value, 
the only difference is multimaps can store duplicate elements

Example:
multimap<int,int> mpp;
multimap<string,int> mpp;

Functions :
1.insert() – to insert an element in the multimap.
multimap<int,int> mp;
mp.insert({1,10});
mp.insert({2,20});
2.begin() – return an iterator pointing to the first element in the multimap.
mp.begin();
3.end() – returns an iterator to the theoretical element after the last element.
mp.end();
4.clear() – deletes all the elements in the multimap.
mp.clear();
5.find() – to search for an element in the map.
multimap<int,int> mp;
mp.insert({1,10});
mp.insert({2,20});
if(mp.find(2)!=mp.end())
cout<<"true"<<endl;
6.erase() – to delete a single element or elements between a particular range.
mp.erase(key);
mp.erase(iterator position);
mp.erase(iterator position 1, iterator position 2);
7.size() – returns the number of elements on the multimap.
mp.size();
8.empty() – to check if the multimap is empty or not.
mp.empty();
9.cbegin() – it refers to the first element of the multimap.
10.cend() – it refers to the theoretical element after the last element of the multimap.
11.rbegin() – it points to the last element of the multimap.
12.rend() – it points to the theoretical element before the first element of the multimap.
13.emplace() – to insert an element in the multimap.
14.max_size() – the maximum elements a multimap can hold.
