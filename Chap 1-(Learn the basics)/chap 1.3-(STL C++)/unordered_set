An unordered set in STL is a container that stores unique elements in no particular order.
Every operation on an unordered set takes O(1) complexity in the average case and takes O(n) in the worst case.

Example:
unordered_set<int> s;
unordered_set<string> str;

Functions:

1. insert()-to insert an element in the unordered set.
  ex:-
  unordered_set<int> s;
  s.insert(1);
  s.insert(2);
2. begin() – return an iterator pointing to the first element in the unordered set.
3. end() – returns an iterator to the theoretical element after the last element.
4. count() – it returns 1 if the element is present in the container otherwise 0.
  ex:-
  unordered_set<int> s;
  s.insert(1);
  s.insert(2);
  s.count(2); //returns true
5. clear() – deletes all the elements in unordered set.
6. find() – to search an element in the unordered set.
  ex:-
   unordered_set<int> s;
   s.insert(1);
   s.insert(2);
   if(s.find(2)!=s.end())
   cout<<"true"<<endl;
7. erase() – to delete a single element or elements between a particular range.
8. size() – returns the size of the unordered set.
9. empty() – to check if the unordered set is empty or not.
10. cbegin() – it refers to the first element of the unordered set.
11. cend() – it refers to the theoretical element after the last element of the unordered set.
12. bucket_size() – gives the total number of elements present in a specific bucket in an unordered set.
13. emplace() – to insert an element in the unordered set.
14. max_size() – the maximum elements an unordered_set can hold.
15. max_bucket_count() – to check the maximum number of buckets an unordered set can hold.
  
